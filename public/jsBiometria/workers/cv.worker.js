(()=>{const e={};let a=null;function t(t){if(Object.keys(e).includes(t))throw new Error(`Classifier with file ${t}.xml appears as loaded`);a=new cv.CascadeClassifier,a.load(t),e[t]=a}self.onmessage=async a=>{switch(a.data.msg){case"load":try{self.importScripts("../opencv/cv_alive.js"),cv=cv(),cv=cv instanceof Promise?await cv:cv,cv.onRuntimeInitialized=()=>{t("haarcascade_frontalface_alt2.xml"),t("haarcascade_profileface.xml"),self.postMessage({msg:a.data.msg})}}catch(e){throw console.error(e),new Error("Error on loading OpenCV")}break;case"preloadFile":const{url:c,file:s}=a.data;console.log(c,s,"preloadFile"),await async function(e,a){const t=await self.fetch(a);if(!t.ok)throw new Error(`Response is not OK (${t.status} ${t.statusText} for ${a})`);const c=await t.arrayBuffer(),s=new Uint8Array(c);cv.FS_createDataFile("/",e,s,!0,!0,!1)}(c,s);break;case"detectFace":return function({msg:a,payload:t}){const c=function(a){const{imageData:t,profile:c,resizeWidth:s}=a,o=function(e){const a=cv.matFromImageData(e),t=new cv.Mat;return cv.cvtColor(a,t,cv.COLOR_RGBA2GRAY),a.delete(),t}(t);let r=1;if(s){const e=s;r=o.cols/e;const a=parseInt(o.rows/r,10),t=new cv.Size(e,a);cv.resize(o,o,t,0,0,cv.INTER_AREA)}const i=[],n=new cv.RectVector,l={width:32,height:32},d={width:192,height:192};c?e["haarcascade_profileface.xml"].detectMultiScale(o,n,1.1,3,0,l,d):e["haarcascade_frontalface_alt2.xml"].detectMultiScale(o,n,1.1,3,0,l,d);for(let e=0;e<n.size();e++){const a=n.get(e);i.push({x:a.x*r,y:a.y*r,width:a.width*r,height:a.height*r})}return n.delete(),o.delete(),i}(t);postMessage({msg:a,payload:c})}(a.data)}}})();
//# sourceMappingURL=cv.worker.js.map